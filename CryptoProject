import java.util.*;

public class CryptoProject {
    public static void main(String[] args) {
        System.out.println("Welcome to encryption!");
        String cyphertext = encryptString("Who will win the game?", 5, 3);
        //String plaintext = decryptString(ciphertext, 5);
        System.out.println(cyphertext);
    }
    //normalize text
    public static String normalizeText(String text) {
        String rem = " .,:;'\"!?()";
        for (int i = 0; i < rem.length(); i++) {
            String character = rem.substring(i, i + 1);
            text = text.replace(character, "");
        }
        text = text.toUpperCase();
        return text;

    }
    //shift the alphabet
    public static String shiftAlphabet(int shift) {
        int start = 0;
        if (shift < 0) {
            start = (int) 'Z' + shift + 1;
        }
        else {
            start = 'A' + shift;
        }
        String result = "";
        char currChar = (char) start;
        for (; currChar <= 'Z'; ++currChar) {
            result = result + currChar;
        }
        if (result.length() < 26) {
            for(currChar = 'A'; result.length() < 26; ++currChar) {
                result = result + currChar;
            }
            //return result;
        }
        return result;
    }
    public static String caesarify(String text, int key) {
        if (text.length() == 0) {
            return "";
        }
        else {
            String refer = shiftAlphabet(key);
            String origin = shiftAlphabet(0);
            String a = text.substring(0, 1);
            String b = text.substring(1);
            a = refer.substring(origin.indexOf(a), origin.indexOf(a) + 1);
            return a + caesarify(b, key);
        }
    }
    public static String groupify(String text, int num) {
        if (text.length() == 0) {
            return "";
        }
        else if (text.length() < num) {
            int times = num - text.length();
            String out = text;
            while (times > 0) {
                out = out + "x";
                times --;
            }
            return out; }
        else {
            return text.substring(0, num) + " " + groupify(text.substring(num), num);
        }
    }
    public static String encryptString(String text, int key, int size) {
        text = normalizeText(text);
        text = caesarify(text, key);
        text = groupify(text, size);
        return text;
    }
}
